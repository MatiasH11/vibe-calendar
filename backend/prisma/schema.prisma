generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model company {
  id              Int               @id @default(autoincrement())
  name            String
  business_name   String?
  email           String            @unique
  phone           String?
  is_active       Boolean           @default(true)
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  deleted_at      DateTime?
  audit_logs      audit_log[]
  settings        company_settings?
  departments     department[]
  employees       employee[]
  shift_templates shift_template[]
}

model user {
  id                      Int              @id @default(autoincrement())
  first_name              String
  last_name               String
  email                   String           @unique
  password_hash           String
  created_at              DateTime         @default(now())
  updated_at              DateTime         @updatedAt
  deleted_at              DateTime?
  user_type               user_type        @default(USER)
  is_active               Boolean          @default(true)
  audit_logs              audit_log[]
  employees               employee[]
  created_shift_templates shift_template[]

  @@index([email, deleted_at], map: "idx_user_email_deleted")
  @@index([user_type, is_active, deleted_at], map: "idx_user_type_active")
}

model department {
  id          Int        @id @default(autoincrement())
  company_id  Int
  name        String
  description String?
  color       String     @default("#3B82F6")
  is_active   Boolean    @default(true)
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  deleted_at  DateTime?
  company     company    @relation(fields: [company_id], references: [id], onDelete: Cascade)
  employees   employee[]

  @@unique([company_id, name])
  @@index([company_id, deleted_at], map: "idx_department_company_deleted")
  @@index([company_id, name, deleted_at], map: "idx_department_name_search")
}

model employee {
  id             Int                      @id @default(autoincrement())
  company_id     Int
  user_id        Int
  department_id  Int
  company_role   company_role             @default(EMPLOYEE)
  position       String?
  is_active      Boolean                  @default(true)
  created_at     DateTime                 @default(now())
  updated_at     DateTime                 @updatedAt
  deleted_at     DateTime?
  company        company                  @relation(fields: [company_id], references: [id], onDelete: Cascade)
  department     department               @relation(fields: [department_id], references: [id])
  user           user                     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  shift_patterns employee_shift_pattern[]
  shifts         shift[]

  @@unique([company_id, user_id])
  @@index([company_id, deleted_at, is_active], map: "idx_employee_company_active")
  @@index([company_id, department_id, deleted_at], map: "idx_employee_department")
  @@index([company_id, company_role, deleted_at], map: "idx_employee_role")
  @@index([user_id, deleted_at], map: "idx_employee_user")
  @@index([company_id, user_id, deleted_at], map: "idx_employee_lookup")
}

model shift {
  id          Int          @id @default(autoincrement())
  employee_id Int
  shift_date  DateTime     @db.Date
  start_time  DateTime     @db.Time(6)
  end_time    DateTime     @db.Time(6)
  notes       String?
  status      shift_status @default(confirmed)
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  deleted_at  DateTime?
  employee    employee     @relation(fields: [employee_id], references: [id], onDelete: Cascade)

  @@index([employee_id, shift_date], map: "idx_shift_employee_date")
  @@index([employee_id, shift_date, deleted_at], map: "idx_shift_employee_date_deleted")
  @@index([shift_date, deleted_at], map: "idx_shift_date_deleted")
  @@index([employee_id, status, deleted_at], map: "idx_shift_employee_status_deleted")
  @@index([shift_date, start_time, deleted_at], map: "idx_shift_date_time_deleted")
}

model shift_template {
  id              Int       @id @default(autoincrement())
  company_id      Int
  name            String    @db.VarChar(100)
  description     String?
  start_time      DateTime  @db.Time(6)
  end_time        DateTime  @db.Time(6)
  usage_count     Int       @default(0)
  created_by      Int?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  deleted_at      DateTime?
  company         company   @relation(fields: [company_id], references: [id], onDelete: Cascade)
  created_by_user user?     @relation(fields: [created_by], references: [id])

  @@unique([company_id, name])
  @@index([company_id, deleted_at], map: "idx_shift_template_company_deleted")
  @@index([company_id, usage_count(sort: Desc)], map: "idx_shift_template_usage")
  @@index([company_id, name, deleted_at], map: "idx_shift_template_name_search")
}

model employee_shift_pattern {
  id              Int      @id @default(autoincrement())
  employee_id     Int
  start_time      DateTime @db.Time(6)
  end_time        DateTime @db.Time(6)
  frequency_count Int      @default(1)
  last_used       DateTime @default(now())
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  employee        employee @relation(fields: [employee_id], references: [id], onDelete: Cascade)

  @@unique([employee_id, start_time, end_time])
  @@index([employee_id, frequency_count(sort: Desc)], map: "idx_pattern_frequency")
  @@index([employee_id, last_used(sort: Desc)], map: "idx_pattern_last_used")
}

model audit_log {
  id          Int          @id @default(autoincrement())
  user_id     Int
  company_id  Int
  action      audit_action
  entity_type String
  entity_id   Int?
  old_values  Json?
  new_values  Json?
  ip_address  String?      @db.VarChar(45)
  user_agent  String?
  created_at  DateTime     @default(now())
  company     company      @relation(fields: [company_id], references: [id], onDelete: Cascade)
  user        user         @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([company_id, created_at(sort: Desc)], map: "idx_audit_company_date")
  @@index([user_id, created_at(sort: Desc)], map: "idx_audit_user_date")
  @@index([entity_type, entity_id], map: "idx_audit_entity")
  @@index([action, created_at(sort: Desc)], map: "idx_audit_action_date")
}

model company_settings {
  id                     Int      @id @default(autoincrement())
  company_id             Int      @unique
  max_daily_hours        Decimal  @default(12.0) @db.Decimal(4, 1)
  max_weekly_hours       Decimal  @default(40.0) @db.Decimal(5, 1)
  min_break_hours        Decimal  @default(11.0) @db.Decimal(4, 1)
  allow_overnight_shifts Boolean  @default(false)
  timezone               String   @default("UTC") @db.VarChar(50)
  created_at             DateTime @default(now())
  updated_at             DateTime @updatedAt
  company                company  @relation(fields: [company_id], references: [id], onDelete: Cascade)

  @@index([company_id], map: "idx_company_settings_company")
}

enum shift_status {
  draft
  confirmed
  cancelled
}

enum company_role {
  OWNER
  ADMIN
  MANAGER
  EMPLOYEE
}

enum user_type {
  SUPER_ADMIN
  USER
}

enum audit_action {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  EXPORT
  IMPORT
  BULK_CREATE
  BULK_UPDATE
  BULK_DELETE
}
